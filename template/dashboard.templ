package template

templ Dashboard() {
	@Layout("Dashboard") {
		<div class="max-w-7xl mx-auto">
			<!-- Stats Overview -->
			<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
				<div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-blue-100 text-sm font-medium">Total Scans</p>
							<p id="totalScans" class="text-3xl font-bold mt-2">0</p>
						</div>
						<div class="bg-blue-400 bg-opacity-30 rounded-full p-3">
							<i class="fas fa-search text-2xl"></i>
						</div>
					</div>
				</div>
				<div class="bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg p-6 text-white">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-red-100 text-sm font-medium">Total Findings</p>
							<p id="totalFindings" class="text-3xl font-bold mt-2">0</p>
						</div>
						<div class="bg-red-400 bg-opacity-30 rounded-full p-3">
							<i class="fas fa-exclamation-triangle text-2xl"></i>
						</div>
					</div>
				</div>
				<div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-green-100 text-sm font-medium">Resources Scanned</p>
							<p id="totalResources" class="text-3xl font-bold mt-2">0</p>
						</div>
						<div class="bg-green-400 bg-opacity-30 rounded-full p-3">
							<i class="fas fa-database text-2xl"></i>
						</div>
					</div>
				</div>
				<div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-purple-100 text-sm font-medium">Critical Issues</p>
							<p id="criticalIssues" class="text-3xl font-bold mt-2">0</p>
						</div>
						<div class="bg-purple-400 bg-opacity-30 rounded-full p-3">
							<i class="fas fa-shield-alt text-2xl"></i>
						</div>
					</div>
				</div>
			</div>
			<!-- Recent Scans -->
			<div class="bg-white rounded-xl shadow-lg p-6 mb-8">
				<div class="flex items-center justify-between mb-6">
					<h2 class="text-2xl font-bold text-gray-800">
						<i class="fas fa-clock mr-2 text-blue-600"></i>Recent Scans
					</h2>
					<div class="flex items-center space-x-2">
						<div id="liveIndicator" class="flex items-center space-x-2 bg-green-100 px-3 py-1 rounded-full">
							<div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
							<span class="text-green-700 text-sm font-medium">Live</span>
						</div>
						<button onclick="refreshDashboard()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition">
							<i class="fas fa-sync-alt mr-2"></i>Refresh
						</button>
					</div>
				</div>
				<div id="recentScans" class="space-y-4">
					<div class="text-center py-8 text-gray-500">
						<i class="fas fa-spinner fa-spin text-3xl mb-3"></i>
						<p>Loading scans...</p>
					</div>
				</div>
			</div>
			<!-- Findings by Type Chart -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
				<div class="bg-white rounded-xl shadow-lg p-6">
					<h2 class="text-xl font-bold text-gray-800 mb-4">
						<i class="fas fa-chart-pie mr-2 text-purple-600"></i>Findings by Type
					</h2>
					<div id="findingsChart" class="h-64"></div>
				</div>
				<div class="bg-white rounded-xl shadow-lg p-6">
					<h2 class="text-xl font-bold text-gray-800 mb-4">
						<i class="fas fa-chart-bar mr-2 text-green-600"></i>Scan Activity
					</h2>
					<div id="activityChart" class="h-64"></div>
				</div>
			</div>
		</div>
		<script>
			let pollInterval;
			
			async function fetchDashboardData() {
				try {
					const response = await fetch('/api/dashboard');
					const data = await response.json();
					
					if (data.status === 'success' && data.data) {
						updateStats(data.data);
						updateRecentScans(data.data.recent_scans || []);
						updateCharts(data.data);
					}
				} catch (error) {
					console.error('Error fetching dashboard data:', error);
				}
			}
			
			function updateStats(data) {
				document.getElementById('totalScans').textContent = data.total_scans || 0;
				document.getElementById('totalFindings').textContent = data.total_findings || 0;
				document.getElementById('totalResources').textContent = data.total_resources_scanned || 0;
				document.getElementById('criticalIssues').textContent = data.high_severity_findings || 0;
			}
			
			function updateRecentScans(scans) {
				const container = document.getElementById('recentScans');
				
				if (!scans || scans.length === 0) {
					container.innerHTML = `
						<div class="text-center py-8 text-gray-500">
							<i class="fas fa-inbox text-3xl mb-3"></i>
							<p>No scans found. Start your first scan!</p>
							<a href="/scan" class="inline-block mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition">
								<i class="fas fa-play mr-2"></i>Start New Scan
							</a>
						</div>
					`;
					return;
				}
				
				container.innerHTML = scans.map(scan => `
					<div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition">
						<div class="flex items-center justify-between">
							<div class="flex-1">
								<div class="flex items-center space-x-3 mb-2">
									<span class="text-sm font-mono text-gray-500">${scan.request_id || 'N/A'}</span>
									<span class="text-xs text-gray-400">${formatDate(scan.created_at)}</span>
								</div>
								<div class="flex items-center space-x-4 text-sm">
									<span class="text-gray-600">
										<i class="fas fa-folder text-blue-500 mr-1"></i>
										${scan.resources_count || 0} Resources
									</span>
									<span class="text-gray-600">
										<i class="fas fa-exclamation-circle text-red-500 mr-1"></i>
										${scan.findings_count || 0} Findings
									</span>
								</div>
							</div>
							<a href="/results/${scan.request_id}" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition text-sm">
								<i class="fas fa-eye mr-1"></i>View
							</a>
						</div>
					</div>
				`).join('');
			}
			
			function updateCharts(data) {
				const findingsChart = document.getElementById('findingsChart');
				const findingsByType = data.findings_by_type || {};
				
				if (Object.keys(findingsByType).length === 0) {
					findingsChart.innerHTML = '<div class="flex items-center justify-center h-full text-gray-400">No data available</div>';
				} else {
					const chartHtml = Object.entries(findingsByType).map(([type, count]) => {
						const percentage = (count / data.total_findings * 100).toFixed(1);
						return `
							<div class="mb-3">
								<div class="flex justify-between text-sm mb-1">
									<span class="font-medium text-gray-700">${type}</span>
									<span class="text-gray-600">${count} (${percentage}%)</span>
								</div>
								<div class="w-full bg-gray-200 rounded-full h-2">
									<div class="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500" style="width: ${percentage}%"></div>
								</div>
							</div>
						`;
					}).join('');
					findingsChart.innerHTML = chartHtml;
				}
			}
			
			function formatDate(dateString) {
				if (!dateString) return 'N/A';
				const date = new Date(dateString);
				const now = new Date();
				const diff = now - date;
				const minutes = Math.floor(diff / 60000);
				const hours = Math.floor(diff / 3600000);
				const days = Math.floor(diff / 86400000);
				
				if (minutes < 1) return 'Just now';
				if (minutes < 60) return `${minutes}m ago`;
				if (hours < 24) return `${hours}h ago`;
				if (days < 7) return `${days}d ago`;
				return date.toLocaleDateString();
			}
			
			function refreshDashboard() {
				const indicator = document.getElementById('liveIndicator');
				indicator.classList.add('animate-pulse');
				fetchDashboardData();
				setTimeout(() => indicator.classList.remove('animate-pulse'), 1000);
			}
			
			// Initial load
			fetchDashboardData();
			
			// Poll every 5 seconds
			pollInterval = setInterval(fetchDashboardData, 5000);
			
			// Cleanup on page unload
			window.addEventListener('beforeunload', () => {
				clearInterval(pollInterval);
			});
		</script>
	}
}
