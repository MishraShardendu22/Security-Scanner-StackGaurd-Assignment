// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Dashboard() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"max-w-7xl mx-auto\"><!-- Stats Overview --><div class=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\"><div class=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white\"><div class=\"flex items-center justify-between\"><div><p class=\"text-blue-100 text-sm font-medium\">Total Scans</p><p id=\"totalScans\" class=\"text-3xl font-bold mt-2\">0</p></div><div class=\"bg-blue-400 bg-opacity-30 rounded-full p-3\"><i class=\"fas fa-search text-2xl\"></i></div></div></div><div class=\"bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg p-6 text-white\"><div class=\"flex items-center justify-between\"><div><p class=\"text-red-100 text-sm font-medium\">Total Findings</p><p id=\"totalFindings\" class=\"text-3xl font-bold mt-2\">0</p></div><div class=\"bg-red-400 bg-opacity-30 rounded-full p-3\"><i class=\"fas fa-exclamation-triangle text-2xl\"></i></div></div></div><div class=\"bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white\"><div class=\"flex items-center justify-between\"><div><p class=\"text-green-100 text-sm font-medium\">Resources Scanned</p><p id=\"totalResources\" class=\"text-3xl font-bold mt-2\">0</p></div><div class=\"bg-green-400 bg-opacity-30 rounded-full p-3\"><i class=\"fas fa-database text-2xl\"></i></div></div></div><div class=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white\"><div class=\"flex items-center justify-between\"><div><p class=\"text-purple-100 text-sm font-medium\">Critical Issues</p><p id=\"criticalIssues\" class=\"text-3xl font-bold mt-2\">0</p></div><div class=\"bg-purple-400 bg-opacity-30 rounded-full p-3\"><i class=\"fas fa-shield-alt text-2xl\"></i></div></div></div></div><!-- Recent Scans --><div class=\"bg-white rounded-xl shadow-lg p-6 mb-8\"><div class=\"flex items-center justify-between mb-6\"><h2 class=\"text-2xl font-bold text-gray-800\"><i class=\"fas fa-clock mr-2 text-blue-600\"></i>Recent Scans</h2><div class=\"flex items-center space-x-2\"><div id=\"liveIndicator\" class=\"flex items-center space-x-2 bg-green-100 px-3 py-1 rounded-full\"><div class=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div><span class=\"text-green-700 text-sm font-medium\">Live</span></div><button onclick=\"refreshDashboard()\" class=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition\"><i class=\"fas fa-sync-alt mr-2\"></i>Refresh</button></div></div><div id=\"recentScans\" class=\"space-y-4\"><div class=\"text-center py-8 text-gray-500\"><i class=\"fas fa-spinner fa-spin text-3xl mb-3\"></i><p>Loading scans...</p></div></div></div><!-- Findings by Type Chart --><div class=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\"><div class=\"bg-white rounded-xl shadow-lg p-6\"><h2 class=\"text-xl font-bold text-gray-800 mb-4\"><i class=\"fas fa-chart-pie mr-2 text-purple-600\"></i>Findings by Type</h2><div id=\"findingsChart\" class=\"h-64\"></div></div><div class=\"bg-white rounded-xl shadow-lg p-6\"><h2 class=\"text-xl font-bold text-gray-800 mb-4\"><i class=\"fas fa-chart-bar mr-2 text-green-600\"></i>Scan Activity</h2><div id=\"activityChart\" class=\"h-64\"></div></div></div></div><script>\n\t\t\tlet pollInterval;\n\t\t\t\n\t\t\tasync function fetchDashboardData() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/dashboard');\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (data.status === 'success' && data.data) {\n\t\t\t\t\t\tupdateStats(data.data);\n\t\t\t\t\t\tupdateRecentScans(data.data.recent_scans || []);\n\t\t\t\t\t\tupdateCharts(data.data);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error fetching dashboard data:', error);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateStats(data) {\n\t\t\t\tdocument.getElementById('totalScans').textContent = data.total_scans || 0;\n\t\t\t\tdocument.getElementById('totalFindings').textContent = data.total_findings || 0;\n\t\t\t\tdocument.getElementById('totalResources').textContent = data.total_resources_scanned || 0;\n\t\t\t\tdocument.getElementById('criticalIssues').textContent = data.high_severity_findings || 0;\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateRecentScans(scans) {\n\t\t\t\tconst container = document.getElementById('recentScans');\n\t\t\t\t\n\t\t\t\tif (!scans || scans.length === 0) {\n\t\t\t\t\tcontainer.innerHTML = `\n\t\t\t\t\t\t<div class=\"text-center py-8 text-gray-500\">\n\t\t\t\t\t\t\t<i class=\"fas fa-inbox text-3xl mb-3\"></i>\n\t\t\t\t\t\t\t<p>No scans found. Start your first scan!</p>\n\t\t\t\t\t\t\t<a href=\"/scan\" class=\"inline-block mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition\">\n\t\t\t\t\t\t\t\t<i class=\"fas fa-play mr-2\"></i>Start New Scan\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontainer.innerHTML = scans.map(scan => `\n\t\t\t\t\t<div class=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition\">\n\t\t\t\t\t\t<div class=\"flex items-center justify-between\">\n\t\t\t\t\t\t\t<div class=\"flex-1\">\n\t\t\t\t\t\t\t\t<div class=\"flex items-center space-x-3 mb-2\">\n\t\t\t\t\t\t\t\t\t<span class=\"text-sm font-mono text-gray-500\">${scan.request_id || 'N/A'}</span>\n\t\t\t\t\t\t\t\t\t<span class=\"text-xs text-gray-400\">${formatDate(scan.created_at)}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"flex items-center space-x-4 text-sm\">\n\t\t\t\t\t\t\t\t\t<span class=\"text-gray-600\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fas fa-folder text-blue-500 mr-1\"></i>\n\t\t\t\t\t\t\t\t\t\t${scan.resources_count || 0} Resources\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span class=\"text-gray-600\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fas fa-exclamation-circle text-red-500 mr-1\"></i>\n\t\t\t\t\t\t\t\t\t\t${scan.findings_count || 0} Findings\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<a href=\"/results/${scan.request_id}\" class=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition text-sm\">\n\t\t\t\t\t\t\t\t<i class=\"fas fa-eye mr-1\"></i>View\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`).join('');\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateCharts(data) {\n\t\t\t\tconst findingsChart = document.getElementById('findingsChart');\n\t\t\t\tconst findingsByType = data.findings_by_type || {};\n\t\t\t\t\n\t\t\t\tif (Object.keys(findingsByType).length === 0) {\n\t\t\t\t\tfindingsChart.innerHTML = '<div class=\"flex items-center justify-center h-full text-gray-400\">No data available</div>';\n\t\t\t\t} else {\n\t\t\t\t\tconst chartHtml = Object.entries(findingsByType).map(([type, count]) => {\n\t\t\t\t\t\tconst percentage = (count / data.total_findings * 100).toFixed(1);\n\t\t\t\t\t\treturn `\n\t\t\t\t\t\t\t<div class=\"mb-3\">\n\t\t\t\t\t\t\t\t<div class=\"flex justify-between text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t<span class=\"font-medium text-gray-700\">${type}</span>\n\t\t\t\t\t\t\t\t\t<span class=\"text-gray-600\">${count} (${percentage}%)</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"w-full bg-gray-200 rounded-full h-2\">\n\t\t\t\t\t\t\t\t\t<div class=\"bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500\" style=\"width: ${percentage}%\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`;\n\t\t\t\t\t}).join('');\n\t\t\t\t\tfindingsChart.innerHTML = chartHtml;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction formatDate(dateString) {\n\t\t\t\tif (!dateString) return 'N/A';\n\t\t\t\tconst date = new Date(dateString);\n\t\t\t\tconst now = new Date();\n\t\t\t\tconst diff = now - date;\n\t\t\t\tconst minutes = Math.floor(diff / 60000);\n\t\t\t\tconst hours = Math.floor(diff / 3600000);\n\t\t\t\tconst days = Math.floor(diff / 86400000);\n\t\t\t\t\n\t\t\t\tif (minutes < 1) return 'Just now';\n\t\t\t\tif (minutes < 60) return `${minutes}m ago`;\n\t\t\t\tif (hours < 24) return `${hours}h ago`;\n\t\t\t\tif (days < 7) return `${days}d ago`;\n\t\t\t\treturn date.toLocaleDateString();\n\t\t\t}\n\t\t\t\n\t\t\tfunction refreshDashboard() {\n\t\t\t\tconst indicator = document.getElementById('liveIndicator');\n\t\t\t\tindicator.classList.add('animate-pulse');\n\t\t\t\tfetchDashboardData();\n\t\t\t\tsetTimeout(() => indicator.classList.remove('animate-pulse'), 1000);\n\t\t\t}\n\t\t\t\n\t\t\t// Initial load\n\t\t\tfetchDashboardData();\n\t\t\t\n\t\t\t// Poll every 5 seconds\n\t\t\tpollInterval = setInterval(fetchDashboardData, 5000);\n\t\t\t\n\t\t\t// Cleanup on page unload\n\t\t\twindow.addEventListener('beforeunload', () => {\n\t\t\t\tclearInterval(pollInterval);\n\t\t\t});\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout("Dashboard").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
